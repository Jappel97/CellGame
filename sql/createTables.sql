SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[__MigrationHistory](
	[MigrationId] [nvarchar](150) NOT NULL,
	[ContextKey] [nvarchar](300) NOT NULL,
	[Model] [varbinary](max) NOT NULL,
	[ProductVersion] [nvarchar](32) NOT NULL,
 CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED
(
	[MigrationId] ASC,
	[ContextKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetRoles](
	[Id] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

CREATE TABLE [dbo].[AspNetUsers](
	[Id] [nvarchar](128) NOT NULL,
	[Hometown] [nvarchar](max) NULL,
	[Email] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[LockoutEndDateUtc] [datetime] NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[UserName] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

ALTER TABLE [dbo].[AspNetUserClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserClaims] CHECK CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserLogins](
	[LoginProvider] [nvarchar](128) NOT NULL,
	[ProviderKey] [nvarchar](128) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED
(
	[LoginProvider] ASC,
	[ProviderKey] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[AspNetUserLogins]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserLogins] CHECK CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserRoles](
	[UserId] [nvarchar](128) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]
GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH CHECK ADD  CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE TABLE SCENARIOS (
   SCENARIO_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
   SCENARIO_NAME VARCHAR(200) NOT NULL,
   SCENARIO_DESCRIPTION VARCHAR(1000) NOT NULL,
   SCENARIO_FIRST_QUESTION INT,
   SCENARIO_APPROVED BIT DEFAULT 0,
   SCENARIO_IS_ACTIVE BIT NOT NULL DEFAULT 1,
   SCENARIO_CELL_FUNCTION VARCHAR (1000),
   SCENARIO_CELL_SHAPE_AND_FEATURES VARCHAR (1000),
   SCENARIO_CELL_LIFESPAN VARCHAR (1000),
   SCENARIO_CELL_NUTRITION VARCHAR (1000),
   CONSTRAINT FK_SCENARIO_MADE_BY FOREIGN KEY(SCENARIO_MADE_BY) REFERENCES AspNetUsers(Id));

CREATE TABLE QUESTIONS (
   QUESTION_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
   QUESTION_TITLE VARCHAR(140)  NOT NULL,
   QUESTION_SCENARIO INT  NOT NULL,
   QUESTION_DESCRIPTION VARCHAR (1000) NOT NULL,
   QUESTION_PICTURE_URL VARCHAR (500) NOT NULL,
   QUESTION_IS_ACTIVE BIT NOT NULL DEFAULT 1,
   CONSTRAINT FK_SCENARIO_ID FOREIGN KEY(QUESTION_SCENARIO) REFERENCES SCENARIOS(SCENARIO_ID));

CREATE TABLE ANSWERS (
   ANSWER_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
   ANSWER_FOR_QUESTION INT  NOT NULL,
   ANSWER_TEXT VARCHAR(500) NOT NULL,
   ANSWER_REFERENCES INT  NOT NULL,
   ANSWER_IS_ACTIVE BIT NOT NULL DEFAULT 1,
   ANSWER_REQUIRES_COMMENT BIT NOT NULL DEFAULT 1,
   CONSTRAINT FK_ANSWER_FOR_QUESTION FOREIGN KEY(ANSWER_FOR_QUESTION) REFERENCES QUESTIONS(QUESTION_ID),
   CONSTRAINT FK_ANSWER_REFERENCES FOREIGN KEY(ANSWER_REFERENCES) REFERENCES QUESTIONS(QUESTION_ID));

CREATE TABLE STUDENTS (
   STUDENT_ID NVARCHAR (128) NOT NULL,
   STUDENT_NAME VARCHAR(100) NOT NULL,
   CONSTRAINT FK_STUDENT_ID FOREIGN KEY(STUDENT_ID) REFERENCES AspNetUsers(Id));


--shouldn't need this anymore if it crashes add it and we will fix it later
--CREATE TABLE GRADES (
--   GRADE_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
--   GRADE_FOR_STUDENT NVARCHAR (128) NOT NULL,
--   GRADE_FOR_SCENARIO INT NOT NULL,
--   GRADE_TOTAL INT NOT NULL,
--   GRADE_MAX INT NOT NULL,
--   GRADE_COMMENTS  VARCHAR (500),
--   CONSTRAINT FK_GRADE_FOR_STUDENT FOREIGN KEY(GRADE_FOR_STUDENT) REFERENCES AspNetUsers(Id),
--   CONSTRAINT FK_GRADE_FOR_SCENARIO FOREIGN KEY(GRADE_FOR_SCENARIO) REFERENCES SCENARIOS(SCENARIO_ID));

   --rewrite this
CREATE TABLE SCENARIOS_TO_GRADE (
   STG_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
   STG_STUDENT_ID NVARCHAR (128) NOT NULL,
   STG_SCENARIO_ID INT NOT NULL,
   STG_GRADE INT,
   STG_COMMENTS VARCHAR (1000),
   CONSTRAINT FK_STG_STUDENT_ID FOREIGN KEY(STG_STUDENT_ID) REFERENCES AspNetUsers(Id),
   CONSTRAINT FK_STG_SCENARIO_ID FOREIGN KEY(STG_SCENARIO_ID) REFERENCES SCENARIOS(SCENARIO_ID));
--this is a list of all the scenarios students have played. if there's a grade, then either don't show it or delete that row and all the answers that go with it

CREATE TABLE STUDENT_ANSWERS (
   SA_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
   SA_STUDENT_ID NVARCHAR (128) NOT NULL,
   SA_SCENARIO_ID INT NOT NULL,
   SA_SCENARIO_TO_GRADE INT NOT NULL,
   SA_QUESTION_ID INT NOT NULL,
   SA_ANSWER_ID INT NOT NULL,
   SA_STUDENT_ANSWER_TEXT VARCHAR (1000) NOT NULL,
   CONSTRAINT FK_SA_STUDENT_ID FOREIGN KEY(SA_STUDENT_ID) REFERENCES AspNetUsers(Id),
   CONSTRAINT FK_SA_SCENARIO_ID FOREIGN KEY(SA_SCENARIO_ID) REFERENCES SCENARIOS(SCENARIO_ID),
   CONSTRAINT FK_SA_SCENARIOS_TO_GRADE FOREIGN KEY(SA_SCENARIO_TO_GRADE) REFERENCES SCENARIOS_TO_GRADE(STG_ID),
   CONSTRAINT FK_SA_QUESTION_ID FOREIGN KEY(SA_QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID),
   CONSTRAINT FK_SA_ANSWER_ID FOREIGN KEY(SA_ANSWER_ID) REFERENCES ANSWERS(ANSWER_ID));
--this would just copy all the text to this table, unless you want to just put in the id and do a bunch of joins to get the text

CREATE TABLE ANSWER_QUESTIONS (
	ANSWER_ID INT NOT NULL,
	QUESTION_REFERENCE_ID INT NOT NULL,
	PROBABILITY INT NOT NULL,
	CONSTRAINT FK_ANSWER_ID FOREIGN KEY(ANSWER_ID) REFERENCES ANSWERS(ANSWER_ID),
	CONSTRAINT FK_QUESTION_ID FOREIGN KEY(QUESTION_REFERENCE_ID) REFERENCES QUESTIONS(QUESTION_ID));





-- NEW CODE TO EDIT TABLES

sp_rename 'ANSWER_QUESTIONS.QUESTION_ID', 'QUESTION_REFERENCE_ID', 'COLUMN';
